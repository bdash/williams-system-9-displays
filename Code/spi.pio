;
; Copyright (c) 2020 Raspberry Pi (Trading) Ltd.
;
; SPDX-License-Identifier: BSD-3-Clause
;
; The number of bits per FIFO entry is configured via the Y register
; and the autopush/pull threshold. From 2 to 32 bits.
;
; Pin assignments:
; - CSn is side-set bit 0
; - SCK is side-set bit 1
; - MOSI is OUT bit 0 (host-to-device)
; - MISO is IN bit 0 (device-to-host)

.program spi
.side_set 2

; Clock phase = 1: data transitions on the leading edge of each SCK pulse, and
; is captured on the trailing edge.
.wrap_target
bitloop:
    out pins, 1        side 0b10 [1]
    in pins, 1         side 0b00
    jmp x-- bitloop    side 0b00

    out pins, 1        side 0b10
    mov x, y           side 0b10
    in pins, 1         side 0b00
    jmp !osre bitloop  side 0b00

public entry_point:                  ; Must set X,Y to n-2 before starting!
    pull ifempty       side 0b01 [1] ; Block with CSn high (minimum 2 cycles)
    nop                side 0b00 [1] ; CSn front porch
.wrap

% c-sdk {
#include "hardware/gpio.h"
static inline void pio_spi_cs_init(PIO pio, uint sm, uint prog_offs, uint n_bits, float clkdiv,
        uint pin_cs, uint pin_sck, uint pin_mosi, uint pin_miso) {
    assert(pin_sck == pin_cs + 1);
    pio_sm_config c = spi_program_get_default_config(prog_offs);
    sm_config_set_out_pins(&c, pin_mosi, 1);
    sm_config_set_in_pins(&c, pin_miso);
    sm_config_set_sideset(&c, 2, false, false);
    sm_config_set_sideset_pins(&c, pin_cs);
    // Only support MSB-first is supported (shift to right, auto push/pull, threshold=n_bits)
    sm_config_set_out_shift(&c, true, true, n_bits);
    sm_config_set_in_shift(&c, false, true, n_bits);
    sm_config_set_clkdiv(&c, clkdiv);

    // CS output is high, MOSI, SCK output are low, MISO is input
    pio_sm_set_pins_with_mask(pio, sm, (1u << pin_cs), (1u << pin_cs) | (1u << pin_sck) | (1u << pin_mosi));
    pio_sm_set_pindirs_with_mask(pio, sm, (1u << pin_cs) | (1u << pin_sck) | (1u << pin_mosi), (1u << pin_cs) | (1u << pin_sck) | (1u << pin_mosi) | (1u << pin_miso));
    pio_gpio_init(pio, pin_mosi);
    pio_gpio_init(pio, pin_miso);
    pio_gpio_init(pio, pin_cs);
    pio_gpio_init(pio, pin_sck);

    // The pin muxes can be configured to invert the output (among other things)
    // and this is a cheesy way to get CPOL=1
    gpio_set_outover(pin_sck, GPIO_OVERRIDE_INVERT);
    // SPI is synchronous, so bypass input synchroniser to reduce input delay.
    hw_set_bits(&pio->input_sync_bypass, 1u << pin_miso);

    pio_sm_init(pio, sm, prog_offs + spi_offset_entry_point, &c);
    pio_sm_exec(pio, sm, pio_encode_set(pio_x, n_bits - 2));
    pio_sm_exec(pio, sm, pio_encode_set(pio_y, n_bits - 2));
    pio_sm_set_enabled(pio, sm, true);
}
%}
